// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entities.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7713834981741827160),
      name: 'Game',
      lastPropertyId: const IdUid(6, 52954830901663747),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 141598930932403629),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6833532656765666531),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1668452981285116605),
            name: 'price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2745756562253197207),
            name: 'releaseDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 52954830901663747),
            name: 'image',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6691305987459240607),
      name: 'User',
      lastPropertyId: const IdUid(4, 3868462314454172655),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5614653201342403797),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 613380180630609416),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1943103753578327533),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3868462314454172655),
            name: 'balance',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 1591839138115998281),
            name: 'games',
            targetId: const IdUid(1, 7713834981741827160))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 5757013344363839350),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(3, 1591839138115998281),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5757013344363839350],
      retiredIndexUids: const [],
      retiredPropertyUids: const [2792622372951834586, 7232420435846912030],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Game: EntityDefinition<Game>(
        model: _entities[0],
        toOneRelations: (Game object) => [],
        toManyRelations: (Game object) => {},
        getId: (Game object) => object.id,
        setId: (Game object, int id) {
          object.id = id;
        },
        objectToFB: (Game object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final imageOffset = fbb.writeListInt8(object.image);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.price);
          fbb.addInt64(3, object.releaseDate.millisecondsSinceEpoch);
          fbb.addOffset(5, imageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Game(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              price: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              releaseDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              image: const fb.Uint8ListReader(lazy: false)
                  .vTableGet(buffer, rootOffset, 14, Uint8List(0)) as Uint8List)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[1],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) =>
            {RelInfo<User>.toMany(3, object.id): object.games},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final userNameOffset = fbb.writeString(object.userName);
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userNameOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.addInt64(3, object.balance);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              userName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              balance:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(object.games, store,
              RelInfo<User>.toMany(3, object.id), store.box<User>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Game] entity fields to define ObjectBox queries.
class Game_ {
  /// see [Game.id]
  static final id = QueryIntegerProperty<Game>(_entities[0].properties[0]);

  /// see [Game.name]
  static final name = QueryStringProperty<Game>(_entities[0].properties[1]);

  /// see [Game.price]
  static final price = QueryIntegerProperty<Game>(_entities[0].properties[2]);

  /// see [Game.releaseDate]
  static final releaseDate =
      QueryIntegerProperty<Game>(_entities[0].properties[3]);

  /// see [Game.image]
  static final image =
      QueryByteVectorProperty<Game>(_entities[0].properties[4]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[1].properties[0]);

  /// see [User.userName]
  static final userName = QueryStringProperty<User>(_entities[1].properties[1]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[1].properties[2]);

  /// see [User.balance]
  static final balance = QueryIntegerProperty<User>(_entities[1].properties[3]);

  /// see [User.games]
  static final games =
      QueryRelationToMany<User, Game>(_entities[1].relations[0]);
}
